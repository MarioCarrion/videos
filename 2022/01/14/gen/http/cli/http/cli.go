// Code generated by goa v3.5.3, DO NOT EDIT.
//
// http HTTP client CLI support package
//
// Command:
// $ goa gen mario/goa/design

package cli

import (
	"flag"
	"fmt"
	usersc "mario/goa/gen/http/users/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `users (create|all)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` users create --body '{
      "birth_year": 2004,
      "name": "nne"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		usersFlags = flag.NewFlagSet("users", flag.ContinueOnError)

		usersCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		usersCreateBodyFlag = usersCreateFlags.String("body", "REQUIRED", "")

		usersAllFlags = flag.NewFlagSet("all", flag.ExitOnError)
	)
	usersFlags.Usage = usersUsage
	usersCreateFlags.Usage = usersCreateUsage
	usersAllFlags.Usage = usersAllUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "users":
			svcf = usersFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "users":
			switch epn {
			case "create":
				epf = usersCreateFlags

			case "all":
				epf = usersAllFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "users":
			c := usersc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = usersc.BuildCreatePayload(*usersCreateBodyFlag)
			case "all":
				endpoint = c.All()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// usersUsage displays the usage of the users command and its subcommands.
func usersUsage() {
	fmt.Fprintf(os.Stderr, `API for Users
Usage:
    %[1]s [globalflags] users COMMAND [flags]

COMMAND:
    create: Create implements create.
    all: All implements all.

Additional help:
    %[1]s users COMMAND --help
`, os.Args[0])
}
func usersCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users create -body JSON

Create implements create.
    -body JSON: 

Example:
    %[1]s users create --body '{
      "birth_year": 2004,
      "name": "nne"
   }'
`, os.Args[0])
}

func usersAllUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users all

All implements all.

Example:
    %[1]s users all
`, os.Args[0])
}
