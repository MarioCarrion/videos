// Code generated by goa v3.5.3, DO NOT EDIT.
//
// users HTTP client types
//
// Command:
// $ goa gen mario/goa/design

package client

import (
	users "mario/goa/gen/users"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "users" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	Name      string `form:"name" json:"name" xml:"name"`
	BirthYear int32  `form:"birth_year" json:"birth_year" xml:"birth_year"`
}

// CreateResponseBody is the type of the "users" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	BirthYear *int32  `form:"birth_year,omitempty" json:"birth_year,omitempty" xml:"birth_year,omitempty"`
}

// AllResponseBody is the type of the "users" service "all" endpoint HTTP
// response body.
type AllResponseBody []*UserResponse

// UserResponse is used to define fields on response body types.
type UserResponse struct {
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	BirthYear *int32  `form:"birth_year,omitempty" json:"birth_year,omitempty" xml:"birth_year,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "users" service.
func NewCreateRequestBody(p *users.User) *CreateRequestBody {
	body := &CreateRequestBody{
		Name:      p.Name,
		BirthYear: p.BirthYear,
	}
	return body
}

// NewCreateUserOK builds a "users" service "create" endpoint result from a
// HTTP "OK" response.
func NewCreateUserOK(body *CreateResponseBody) *users.User {
	v := &users.User{
		Name:      *body.Name,
		BirthYear: *body.BirthYear,
	}

	return v
}

// NewAllUserOK builds a "users" service "all" endpoint result from a HTTP "OK"
// response.
func NewAllUserOK(body []*UserResponse) []*users.User {
	v := make([]*users.User, len(body))
	for i, val := range body {
		v[i] = unmarshalUserResponseToUsersUser(val)
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.BirthYear == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("birth_year", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 5, true))
		}
	}
	if body.BirthYear != nil {
		if *body.BirthYear < 1900 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.birth_year", *body.BirthYear, 1900, true))
		}
	}
	if body.BirthYear != nil {
		if *body.BirthYear > 2022 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.birth_year", *body.BirthYear, 2022, false))
		}
	}
	return
}

// ValidateUserResponse runs the validations defined on UserResponse
func ValidateUserResponse(body *UserResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.BirthYear == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("birth_year", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 5, true))
		}
	}
	if body.BirthYear != nil {
		if *body.BirthYear < 1900 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.birth_year", *body.BirthYear, 1900, true))
		}
	}
	if body.BirthYear != nil {
		if *body.BirthYear > 2022 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.birth_year", *body.BirthYear, 2022, false))
		}
	}
	return
}
